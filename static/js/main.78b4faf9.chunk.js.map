{"version":3,"sources":["components/DayOne.js","components/Palindrome.js","App.js","reportWebVitals.js","index.js"],"names":["DayOne","className","id","language","style","a11yDark","showLineNumbers","wrapLines","lineProps","wordBreak","whiteSpace","Palindrome","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAsHeA,MA/Gf,WAaE,OACE,sBAAKC,UAAU,OAAf,UACE,oBAAIC,GAAG,aAAP,yCACA,cAAC,IAAD,CACEC,SAAS,aACTC,MAAOC,IACPC,iBAAiB,EACjBC,WAAW,EACXC,UAAW,CACTJ,MAAO,CAAEK,UAAW,aAAcC,WAAY,aANlD,SAdF,0LAyBE,0CACA,sBAAKT,UAAU,mBAAf,UACE,qBAAKA,UAAU,uBAAf,sCACA,qBAAKA,UAAU,uBAAf,gDAGA,qBAAKA,UAAU,uBAAf,+CAGA,qBAAKA,UAAU,uBAAf,iCAEF,cAAC,IAAD,CACEE,SAAS,aACTC,MAAOC,IACPC,iBAAiB,EACjBC,WAAW,EACXC,UAAW,CACTJ,MAAO,CAAEK,UAAW,aAAcC,WAAY,aANlD,SAlCF,qGA6CE,qCACA,cAAC,IAAD,CACEP,SAAS,aACTC,MAAOC,IACPC,iBAAiB,EACjBC,WAAW,EACXC,UAAW,CACTJ,MAAO,CAAEK,UAAW,aAAcC,WAAY,aANlD,SA5CF,yEAuDE,8CACA,sBAAKT,UAAU,mBAAf,UACE,qBAAKA,UAAU,uBAAf,oCACA,qBAAKA,UAAU,uBAAf,gHAIA,qBAAKA,UAAU,uBAAf,+CAIF,cAAC,IAAD,CACEE,SAAS,aACTC,MAAOC,IACPC,iBAAiB,EACjBC,WAAW,EACXC,UAAW,CACTJ,MAAO,CAAEK,UAAW,aAAcC,WAAY,aANlD,SAhEF,iIA2EE,8CACA,cAAC,IAAD,CACEP,SAAS,aACTC,MAAOC,IACPC,iBAAiB,EACjBC,WAAW,EACXC,UAAW,CACTJ,MAAO,CAAEK,UAAW,aAAcC,WAAY,aANlD,SA1EF,kIAqFE,iDACA,cAAC,IAAD,CACEP,SAAS,aACTC,MAAOC,IACPC,iBAAiB,EACjBC,WAAW,EACXC,UAAW,CACTJ,MAAO,CAAEK,UAAW,aAAcC,WAAY,aANlD,SApFF,8FCWWC,MAvBf,WAKE,OACE,sBAAKV,UAAU,OAAf,UACE,oBAAIC,GAAG,aAAP,qCACA,cAAC,IAAD,CACEM,UAAW,CACTJ,MAAO,CAAEK,UAAW,aAAcC,WAAY,aAEhDP,SAAS,aACTC,MAAOC,IACPC,iBAAiB,EACjBC,WAAW,EAPb,SANF,oWCiBWK,MAtBf,WACE,OACE,sBAAKX,UAAU,MAAf,UACE,yBAAQA,UAAU,cAAlB,UACE,+DACA,sBAAKA,UAAU,WAAf,UACE,mBAAGY,KAAK,cAAR,SACE,sDAEF,mBAAGA,KAAK,cAAR,SACE,wDAIN,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,WCROC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.78b4faf9.chunk.js","sourcesContent":["import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport {\n  dark,\n  a11yDark,\n  darcula,\n} from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nfunction DayOne() {\n  const directionString =\n    '// Directions: Given a string, return a new string with the reversed order of characters\\n// reverse(\"apple\") === \"leppa\"; \\n// reverse(\"hello\") === \"olleh\"\\nfunction reverse(str){}';\n  const answersString =\n    'function reverse(str){\\n  const arr = str.split(\"\");\\n  arr.reverse();\\n  return arr.join(\"\")\\n}';\n  const answersString2 =\n    'function reverse(str){\\n  return str.split(\"\").reverse().join(\"\")\\n}';\n  const answersString3 =\n    'function reverse(str){\\n let reversed=\"\";\\n for (let char of str) {\\n   reversed = char + reversed;\\n }\\n return reversed\\n}';\n  const answersString4 =\n    'function reverse(str){\\n return str.split(\"\").reduce((reversed, character) => {\\n   return character + reversed;\\n  }, \"\")\\n}';\n  const reduceSyntax =\n    'arr.reduce(callback( accumulator, currentValue, [, index[, array]] )[, initialValue])';\n  return (\n    <div className=\"code\">\n      <h4 id=\"question-1\">Question 1: String Reversal</h4>\n      <SyntaxHighlighter\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n      >\n        {directionString}\n      </SyntaxHighlighter>\n      <h4>Answers:</h4>\n      <div className=\"code__answertree\">\n        <div className=\"code__answer-section\">turn 'str' into an array</div>\n        <div className=\"code__answer-section\">\n          call 'reverse' method on the array\n        </div>\n        <div className=\"code__answer-section\">\n          join the array back into a string\n        </div>\n        <div className=\"code__answer-section\">return the array</div>\n      </div>\n      <SyntaxHighlighter\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n      >\n        {answersString}\n      </SyntaxHighlighter>\n      <div>or</div>\n      <SyntaxHighlighter\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n      >\n        {answersString2}\n      </SyntaxHighlighter>\n      <h4>Alt Answers:</h4>\n      <div className=\"code__answertree\">\n        <div className=\"code__answer-section\">create an empty string</div>\n        <div className=\"code__answer-section\">\n          for each character in the provided string take the character and add\n          it to the start of 'reversed'\n        </div>\n        <div className=\"code__answer-section\">\n          return the variable 'reversed'\n        </div>\n      </div>\n      <SyntaxHighlighter\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n      >\n        {answersString3}\n      </SyntaxHighlighter>\n      <div>solution 3:</div>\n      <SyntaxHighlighter\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n      >\n        {answersString4}\n      </SyntaxHighlighter>\n      <div>Reduce Syntax:</div>\n      <SyntaxHighlighter\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n      >\n        {reduceSyntax}\n      </SyntaxHighlighter>\n    </div>\n  );\n}\n\nexport default DayOne;\n","import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport {\n  dark,\n  a11yDark,\n  darcula,\n} from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nfunction Palindrome() {\n  const directionString =\n    '// Directions: Given a string, return true if the string is a palindrome and false if not\\n// Palindromes are strings that form the same word reversed.\\n// *Do* include spaces and panctuation in determining if the string is a palindrome.\\n// Examples:\\n// palindrome(\"abba\") === true\\n// palindrome(\"abcdefg\") === false\\nfunction palindrome(str){}';\n  const answersString =\n    'function reverse(str){\\n  const arr = str.split(\"\");\\n  arr.reverse();\\n  return arr.join(\"\")\\n}';\n  return (\n    <div className=\"code\">\n      <h4 id=\"question-2\">Question 2: Palindromes</h4>\n      <SyntaxHighlighter\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n      >\n        {directionString}\n      </SyntaxHighlighter>\n    </div>\n  );\n}\n\nexport default Palindrome;\n","import './App.scss';\nimport DayOne from './components/DayOne';\nimport Palindrome from './components/Palindrome';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header className=\"app__header\">\n        <h1>Claire's Frontend Study Guide</h1>\n        <div className=\"app__nav\">\n          <a href=\"#question-1\">\n            <h4>1: String Reversal</h4>\n          </a>\n          <a href=\"#question-2\">\n            <h4>2: Palindromes</h4>\n          </a>\n        </div>\n      </header>\n      <div>\n        <DayOne />\n        <Palindrome />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}