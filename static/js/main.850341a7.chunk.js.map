{"version":3,"sources":["components/DayOne.js","components/Palindrome.js","components/ReverseInt.js","components/MaxChar.js","App.js","reportWebVitals.js","index.js"],"names":["DayOne","className","id","language","style","a11yDark","showLineNumbers","wrapLines","lineProps","wordBreak","whiteSpace","Palindrome","ReverseInt","MaxChar","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.850341a7.chunk.js","sourcesContent":["import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport {\n  dark,\n  a11yDark,\n  darcula,\n} from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nfunction DayOne() {\n  const directionString =\n    '// Directions: Given a string, return a new string with the reversed order of characters\\n// reverse(\"apple\") === \"leppa\"; \\n// reverse(\"hello\") === \"olleh\"\\nfunction reverse(str){}';\n  const answersString =\n    'function reverse(str){\\n  const arr = str.split(\"\");\\n  arr.reverse();\\n  return arr.join(\"\")\\n}';\n  const answersString2 =\n    'function reverse(str){\\n  return str.split(\"\").reverse().join(\"\")\\n}';\n  const answersString3 =\n    'function reverse(str){\\n let reversed=\"\";\\n for (let char of str) {\\n   reversed = char + reversed;\\n }\\n return reversed\\n}';\n  const answersString4 =\n    'function reverse(str){\\n return str.split(\"\").reduce((reversed, character) => {\\n   return character + reversed;\\n  }, \"\")\\n}';\n  const reduceSyntax =\n    'arr.reduce(callback( accumulator, currentValue, [, index[, array]] )[, initialValue])';\n  return (\n    <div className=\"code\">\n      <h4 id=\"question-1\">Question 1: String Reversal</h4>\n      <SyntaxHighlighter\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n      >\n        {directionString}\n      </SyntaxHighlighter>\n      <h4>Answers:</h4>\n      <div className=\"code__answertree\">\n        <div className=\"code__answer-section\">turn 'str' into an array</div>\n        <div className=\"code__answer-section\">\n          call 'reverse' method on the array\n        </div>\n        <div className=\"code__answer-section\">\n          join the array back into a string\n        </div>\n        <div className=\"code__answer-section\">return the array</div>\n      </div>\n      <SyntaxHighlighter\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n      >\n        {answersString}\n      </SyntaxHighlighter>\n      <div>or</div>\n      <SyntaxHighlighter\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n      >\n        {answersString2}\n      </SyntaxHighlighter>\n      <h4>Alt Answers:</h4>\n      <div className=\"code__answertree\">\n        <div className=\"code__answer-section\">create an empty string</div>\n        <div className=\"code__answer-section\">\n          for each character in the provided string take the character and add\n          it to the start of 'reversed'\n        </div>\n        <div className=\"code__answer-section\">\n          return the variable 'reversed'\n        </div>\n      </div>\n      <SyntaxHighlighter\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n      >\n        {answersString3}\n      </SyntaxHighlighter>\n      <div>solution 3:</div>\n      <SyntaxHighlighter\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n      >\n        {answersString4}\n      </SyntaxHighlighter>\n      <div>Reduce Syntax:</div>\n      <SyntaxHighlighter\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n      >\n        {reduceSyntax}\n      </SyntaxHighlighter>\n    </div>\n  );\n}\n\nexport default DayOne;\n","import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport {\n  dark,\n  a11yDark,\n  darcula,\n} from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nfunction Palindrome() {\n  const directionString =\n    '// Directions: Given a string, return true if the string is a palindrome and false if not\\n// Palindromes are strings that form the same word reversed.\\n// *Do* include spaces and panctuation in determining if the string is a palindrome.\\n// Examples:\\n// palindrome(\"abba\") === true\\n// palindrome(\"abcdefg\") === false\\nfunction palindrome(str){}';\n  const answersString =\n    'function palindrome(str){\\n return str === str.split(\"\").reverse().join(\"\") ? true : false;\\n}';\n  const answersString2 =\n    'function palindrome(str){\\n return str === str.split(\"\").reverse().join(\"\");\\n}';\n  const answersString3 =\n    'function palindrome(str){\\n  return str.split(\"\").every((char, i) => {\\n    return char === str[str.length - i - 1]\\n });\\n}';\n  const everyMethod =\n    'arr.every(callback(element[, index[, array]])[, thisArg])';\n  return (\n    <div className=\"code\">\n      <h4 id=\"question-2\">Question 2: Palindromes</h4>\n      <SyntaxHighlighter\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n      >\n        {directionString}\n      </SyntaxHighlighter>\n      <SyntaxHighlighter\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n      >\n        {answersString}\n      </SyntaxHighlighter>\n      <div>\n        In my first attempt the use of the ternary statement (? :) is not\n        necessary as this is either a truthy or falsy statement:\n      </div>\n      <SyntaxHighlighter\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n      >\n        {answersString2}\n      </SyntaxHighlighter>\n      <div>Solution 2 (not ideal):</div>\n      <SyntaxHighlighter\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n      >\n        {answersString3}\n      </SyntaxHighlighter>\n      <div>\n        The every() method tests whether all elements in the array pass the test\n        implemented by the provided function. It returns a Boolean value.\n      </div>\n      <SyntaxHighlighter\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n      >\n        {everyMethod}\n      </SyntaxHighlighter>\n    </div>\n  );\n}\n\nexport default Palindrome;\n","import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport {\n  dark,\n  a11yDark,\n  darcula,\n} from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nfunction ReverseInt() {\n  const directionString =\n    '// Directions: Given an integer, return an integer that is the reverse ordering of numbers\\n// Examples:\\n// reverseInt(15) === 51\\n// reverseInt(981) === 189\\n// reverseInt(500) === 5\\n// reverseInt(-15) === -51\\n// reverseInt(-90) === 9\\nfunction reverseInt(n) {}';\n  const answersString =\n    'function reverseInt(n){\\n const reversed = n.toString().split(\"\").reverse().join(\"\");\\n if(n<0) {\\n   return parseInt(reversed) * -1;\\n }\\n return parseInt(reversed);\\n}';\n  const answersString2 =\n    'function reverseInt(n){\\n const reversed = n.toString().split(\"\").reverse().join(\"\");\\n return parseInt(reversed) * Math.sign(n);\\n}';\n  const signMethod =\n    'The Math.sign() function returns either a positive or negative +/- 1, indicating the sign of a number passed into the argument. If the number passed into Math.sign() is 0, it will return a +/- 0. Note that if the number is positive, an explicit (+) will not be returned.';\n  return (\n    <div className=\"code\">\n      <h4 id=\"question-3\">Question 3: Reverse an Int</h4>\n      <SyntaxHighlighter\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n      >\n        {directionString}\n      </SyntaxHighlighter>\n      <div>Solution:</div>\n      <SyntaxHighlighter\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n      >\n        {answersString}\n      </SyntaxHighlighter>\n      <div>Solution utilizing Math.sign():</div>\n      <SyntaxHighlighter\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n      >\n        {signMethod}\n      </SyntaxHighlighter>\n      <SyntaxHighlighter\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n      >\n        {answersString2}\n      </SyntaxHighlighter>\n    </div>\n  );\n}\n\nexport default ReverseInt;\n","import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport {\n  dark,\n  a11yDark,\n  darcula,\n} from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nfunction MaxChar() {\n  const directionString =\n    '// Directions: Given a string, return the character that is most commonly used in the string\\n// Examples:\\n// maxChar(\"abcccccccd\") === \"c\"\\n// maxChar(\"apple 12311111\") === \"1\"\\nfunction maxChar(str){}';\n  const answersString =\n    'function maxChar(str){\\n const charMap = {};\\n let max = 0;\\n let maxChar = \"\";\\n\\n for(let char of str) {\\n  if(charMap[char]) {\\n   charMap[char]++\\n  else {\\n   charMap[char] = 1\\n  }\\n }\\n\\n for (let char in charMap) {\\n  if(charMap[char] > max) {\\n    max = charMap[char];\\n    maxChar = char;\\n  }\\n }\\n\\n return maxChar\\n}';\n  return (\n    <div className=\"code\">\n      <h4 id=\"question-4\">Question 4: Max Chars</h4>\n      <SyntaxHighlighter\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n      >\n        {directionString}\n      </SyntaxHighlighter>\n      <h4>Common String Questions:</h4>\n      <div className=\"code__answertree\">\n        <div className=\"code__answer-section\">\n          What is the most common character in the string?\n        </div>\n        <div className=\"code__answer-section\">\n          Does string A have the same characters as string B (is it an anagram)?\n        </div>\n        <div className=\"code__answer-section\">\n          Does the given string have any repeated characters in it?\n        </div>\n      </div>\n      <div>Solution:</div>\n      <SyntaxHighlighter\n        lineProps={{\n          style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' },\n        }}\n        language=\"javascript\"\n        style={a11yDark}\n        showLineNumbers={true}\n        wrapLines={true}\n      >\n        {answersString}\n      </SyntaxHighlighter>\n    </div>\n  );\n}\n\nexport default MaxChar;\n","import './App.scss';\nimport DayOne from './components/DayOne';\nimport Palindrome from './components/Palindrome';\nimport ReverseInt from './components/ReverseInt';\nimport MaxChar from './components/MaxChar';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header className=\"app__header\">\n        <h1>Claire's Frontend Study Guide</h1>\n        <div className=\"app__nav\">\n          <a href=\"#question-1\">\n            <h4>1: String Reversal</h4>\n          </a>\n          <a href=\"#question-2\">\n            <h4>2: Palindromes</h4>\n          </a>\n          <a href=\"#question-3\">\n            <h4>3: Reverse an Int</h4>\n          </a>\n          <a href=\"#question-4\">\n            <h4>4: Max Char</h4>\n          </a>\n        </div>\n      </header>\n      <div>\n        <DayOne />\n        <Palindrome />\n        <ReverseInt />\n        <MaxChar />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}